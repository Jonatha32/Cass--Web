{"ast":null,"code":"import { collection, addDoc, getDocs, query, where, orderBy, onSnapshot, doc, updateDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from './firebase';\nexport const messagesService = {\n  // Crear nueva conversación\n  async createConversation(participants, productId, productTitle) {\n    try {\n      const conversationRef = await addDoc(collection(db, 'conversations'), {\n        participants,\n        productId,\n        productTitle,\n        lastMessage: '',\n        lastMessageTime: serverTimestamp(),\n        createdAt: serverTimestamp()\n      });\n      return conversationRef.id;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  },\n  // Obtener conversaciones del usuario\n  async getUserConversations(userId) {\n    try {\n      const q = query(collection(db, 'conversations'), where('participants', 'array-contains', userId), orderBy('lastMessageTime', 'desc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting conversations:', error);\n      throw error;\n    }\n  },\n  // Escuchar conversaciones en tiempo real\n  subscribeToConversations(userId, callback) {\n    const q = query(collection(db, 'conversations'), where('participants', 'array-contains', userId), orderBy('lastMessageTime', 'desc'));\n    return onSnapshot(q, snapshot => {\n      const conversations = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      callback(conversations);\n    });\n  },\n  // Enviar mensaje\n  async sendMessage(conversationId, senderId, senderName, message) {\n    try {\n      // Agregar mensaje\n      await addDoc(collection(db, 'messages'), {\n        conversationId,\n        senderId,\n        senderName,\n        message,\n        timestamp: serverTimestamp(),\n        read: false\n      });\n\n      // Actualizar última actividad de la conversación\n      const conversationRef = doc(db, 'conversations', conversationId);\n      await updateDoc(conversationRef, {\n        lastMessage: message,\n        lastMessageTime: serverTimestamp()\n      });\n      return true;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  },\n  // Obtener mensajes de una conversación\n  async getMessages(conversationId) {\n    try {\n      const q = query(collection(db, 'messages'), where('conversationId', '==', conversationId), orderBy('timestamp', 'asc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting messages:', error);\n      throw error;\n    }\n  },\n  // Escuchar mensajes en tiempo real\n  subscribeToMessages(conversationId, callback) {\n    const q = query(collection(db, 'messages'), where('conversationId', '==', conversationId), orderBy('timestamp', 'asc'));\n    return onSnapshot(q, snapshot => {\n      const messages = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      callback(messages);\n    });\n  },\n  // Marcar mensajes como leídos\n  async markAsRead(conversationId, userId) {\n    try {\n      const q = query(collection(db, 'messages'), where('conversationId', '==', conversationId), where('senderId', '!=', userId), where('read', '==', false));\n      const querySnapshot = await getDocs(q);\n      const batch = [];\n      querySnapshot.docs.forEach(doc => {\n        batch.push(updateDoc(doc.ref, {\n          read: true\n        }));\n      });\n      await Promise.all(batch);\n      return true;\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","query","where","orderBy","onSnapshot","doc","updateDoc","serverTimestamp","db","messagesService","createConversation","participants","productId","productTitle","conversationRef","lastMessage","lastMessageTime","createdAt","id","error","console","getUserConversations","userId","q","querySnapshot","docs","map","data","subscribeToConversations","callback","snapshot","conversations","sendMessage","conversationId","senderId","senderName","message","timestamp","read","getMessages","subscribeToMessages","messages","markAsRead","batch","forEach","push","ref","Promise","all"],"sources":["C:/Users/Usuario/Desktop/Carpeta de Pruebas - Holberton/casse-web/src/services/messagesService.js"],"sourcesContent":["import { \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  where, \n  orderBy, \n  onSnapshot,\n  doc,\n  updateDoc,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport const messagesService = {\n  // Crear nueva conversación\n  async createConversation(participants, productId, productTitle) {\n    try {\n      const conversationRef = await addDoc(collection(db, 'conversations'), {\n        participants,\n        productId,\n        productTitle,\n        lastMessage: '',\n        lastMessageTime: serverTimestamp(),\n        createdAt: serverTimestamp()\n      });\n      return conversationRef.id;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  },\n\n  // Obtener conversaciones del usuario\n  async getUserConversations(userId) {\n    try {\n      const q = query(\n        collection(db, 'conversations'),\n        where('participants', 'array-contains', userId),\n        orderBy('lastMessageTime', 'desc')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting conversations:', error);\n      throw error;\n    }\n  },\n\n  // Escuchar conversaciones en tiempo real\n  subscribeToConversations(userId, callback) {\n    const q = query(\n      collection(db, 'conversations'),\n      where('participants', 'array-contains', userId),\n      orderBy('lastMessageTime', 'desc')\n    );\n    \n    return onSnapshot(q, (snapshot) => {\n      const conversations = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      callback(conversations);\n    });\n  },\n\n  // Enviar mensaje\n  async sendMessage(conversationId, senderId, senderName, message) {\n    try {\n      // Agregar mensaje\n      await addDoc(collection(db, 'messages'), {\n        conversationId,\n        senderId,\n        senderName,\n        message,\n        timestamp: serverTimestamp(),\n        read: false\n      });\n\n      // Actualizar última actividad de la conversación\n      const conversationRef = doc(db, 'conversations', conversationId);\n      await updateDoc(conversationRef, {\n        lastMessage: message,\n        lastMessageTime: serverTimestamp()\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  },\n\n  // Obtener mensajes de una conversación\n  async getMessages(conversationId) {\n    try {\n      const q = query(\n        collection(db, 'messages'),\n        where('conversationId', '==', conversationId),\n        orderBy('timestamp', 'asc')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting messages:', error);\n      throw error;\n    }\n  },\n\n  // Escuchar mensajes en tiempo real\n  subscribeToMessages(conversationId, callback) {\n    const q = query(\n      collection(db, 'messages'),\n      where('conversationId', '==', conversationId),\n      orderBy('timestamp', 'asc')\n    );\n    \n    return onSnapshot(q, (snapshot) => {\n      const messages = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      callback(messages);\n    });\n  },\n\n  // Marcar mensajes como leídos\n  async markAsRead(conversationId, userId) {\n    try {\n      const q = query(\n        collection(db, 'messages'),\n        where('conversationId', '==', conversationId),\n        where('senderId', '!=', userId),\n        where('read', '==', false)\n      );\n      \n      const querySnapshot = await getDocs(q);\n      const batch = [];\n      \n      querySnapshot.docs.forEach(doc => {\n        batch.push(updateDoc(doc.ref, { read: true }));\n      });\n      \n      await Promise.all(batch);\n      return true;\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}