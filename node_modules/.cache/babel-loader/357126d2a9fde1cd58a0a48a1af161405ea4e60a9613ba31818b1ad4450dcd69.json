{"ast":null,"code":"import { doc, getDoc, setDoc, updateDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport { db } from './firebase';\nexport const userService = {\n  // Obtener usuario por ID\n  async getUserById(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (userDoc.exists()) {\n        return {\n          id: userDoc.id,\n          ...userDoc.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting user:', error);\n      throw error;\n    }\n  },\n  // Crear o actualizar perfil de usuario\n  async updateUserProfile(userId, userData) {\n    try {\n      const userRef = doc(db, 'users', userId);\n      await setDoc(userRef, {\n        ...userData,\n        updatedAt: new Date()\n      }, {\n        merge: true\n      });\n      return true;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n  // Buscar usuarios por nombre\n  async searchUsers(searchTerm) {\n    try {\n      const q = query(collection(db, 'users'), where('name', '>=', searchTerm), where('name', '<=', searchTerm + '\\uf8ff'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error searching users:', error);\n      throw error;\n    }\n  },\n  // Obtener estadísticas del usuario\n  async getUserStats(userId) {\n    try {\n      // Obtener productos del usuario\n      const productsQuery = query(collection(db, 'articulos'), where('ownerId', '==', userId));\n      const productsSnapshot = await getDocs(productsQuery);\n\n      // Obtener favoritos del usuario\n      const favoritesQuery = query(collection(db, 'favorites'), where('userId', '==', userId));\n      const favoritesSnapshot = await getDocs(favoritesQuery);\n      return {\n        totalProducts: productsSnapshot.size,\n        totalFavorites: favoritesSnapshot.size,\n        totalSales: 0,\n        // Implementar cuando tengamos sistema de ventas\n        rating: 5.0 // Implementar cuando tengamos sistema de ratings\n      };\n    } catch (error) {\n      console.error('Error getting user stats:', error);\n      return {\n        totalProducts: 0,\n        totalFavorites: 0,\n        totalSales: 0,\n        rating: 5.0\n      };\n    }\n  }\n};","map":{"version":3,"names":["doc","getDoc","setDoc","updateDoc","collection","query","where","getDocs","db","userService","getUserById","userId","userDoc","exists","id","data","error","console","updateUserProfile","userData","userRef","updatedAt","Date","merge","searchUsers","searchTerm","q","querySnapshot","docs","map","getUserStats","productsQuery","productsSnapshot","favoritesQuery","favoritesSnapshot","totalProducts","size","totalFavorites","totalSales","rating"],"sources":["C:/Users/Usuario/Desktop/Carpeta de Pruebas - Holberton/casse-web/src/services/userService.js"],"sourcesContent":["import { \n  doc, \n  getDoc, \n  setDoc, \n  updateDoc, \n  collection, \n  query, \n  where, \n  getDocs \n} from 'firebase/firestore';\nimport { db } from './firebase';\n\nexport const userService = {\n  // Obtener usuario por ID\n  async getUserById(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (userDoc.exists()) {\n        return {\n          id: userDoc.id,\n          ...userDoc.data()\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting user:', error);\n      throw error;\n    }\n  },\n\n  // Crear o actualizar perfil de usuario\n  async updateUserProfile(userId, userData) {\n    try {\n      const userRef = doc(db, 'users', userId);\n      await setDoc(userRef, {\n        ...userData,\n        updatedAt: new Date()\n      }, { merge: true });\n      \n      return true;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n\n  // Buscar usuarios por nombre\n  async searchUsers(searchTerm) {\n    try {\n      const q = query(\n        collection(db, 'users'),\n        where('name', '>=', searchTerm),\n        where('name', '<=', searchTerm + '\\uf8ff')\n      );\n      \n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error searching users:', error);\n      throw error;\n    }\n  },\n\n  // Obtener estadísticas del usuario\n  async getUserStats(userId) {\n    try {\n      // Obtener productos del usuario\n      const productsQuery = query(\n        collection(db, 'articulos'),\n        where('ownerId', '==', userId)\n      );\n      const productsSnapshot = await getDocs(productsQuery);\n      \n      // Obtener favoritos del usuario\n      const favoritesQuery = query(\n        collection(db, 'favorites'),\n        where('userId', '==', userId)\n      );\n      const favoritesSnapshot = await getDocs(favoritesQuery);\n\n      return {\n        totalProducts: productsSnapshot.size,\n        totalFavorites: favoritesSnapshot.size,\n        totalSales: 0, // Implementar cuando tengamos sistema de ventas\n        rating: 5.0 // Implementar cuando tengamos sistema de ratings\n      };\n    } catch (error) {\n      console.error('Error getting user stats:', error);\n      return {\n        totalProducts: 0,\n        totalFavorites: 0,\n        totalSales: 0,\n        rating: 5.0\n      };\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}